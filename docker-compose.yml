# version: '3.8' # Obsolete, removed.

services:
  # Main application service (FastAPI)
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: interview_analyzer_app
    ports:
      - "8000:8000" # Expose API port
    volumes:
      - .:/workspaces/interview_analyzer_chaining:cached # Mount code for development
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - PYTHONUNBUFFERED=1 # Ensure logs appear immediately
    # If the API needs to wait for Redis (good practice)
    # Also add explicit depends_on for the test database
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_started
      # Add dependency for the test container
      neo4j-test:
        condition: service_started # Or just service_healthy if we re-add healthcheck
      eventstore:
        condition: service_started
    # Command to run the API server (adjust if needed)
    # command: ["make", "run-api"] # Example using Makefile target
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    # Restore network attachment
    networks:
      - interview_net # Attach app to the same network

  # Redis service for Celery broker/backend
  redis:
    image: redis:7-alpine
    container_name: interview_analyzer_redis
    ports:
      - "6379:6379" # Expose Redis port (optional, for external debugging)
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  # Celery worker service
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile # Use the same image as the app
    container_name: interview_analyzer_worker
    volumes:
      - .:/workspaces/interview_analyzer_chaining:cached # Mount code
    env_file:
      - .env # Load environment variables
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_started
      eventstore:
        condition: service_started
    command: ["celery", "-A", "src.celery_app", "worker", "--loglevel=info"]

  # Add Neo4j service
  neo4j:
    image: neo4j:5.22.0 # Use Neo4j 5.x again
    ports:
      - "7474:7474" # HTTP browser
      - "7687:7687" # Bolt driver
    volumes:
      - neo4j_data:/data
    environment:
      # Use Neo4j 5 format, sourced from .env (no default)
      NEO4J_INITIAL_PASSWORD: ${NEO4J_PASSWORD}
      # Keep license agreement env var
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    env_file:
      - .env # Ensure it reads the .env file for NEO4J_PASSWORD
    # healthcheck: # Temporarily remove healthcheck
    #   test: ["CMD-SHELL", "tcpconnect localhost:7687 || exit 1"]
    #   interval: 5s
    #   timeout: 10s 
    #   retries: 20
    networks:
      - interview_net # Attach to custom network

  # Neo4j service for TESTING
  neo4j-test:
    image: neo4j:5.22.0 # Use Neo4j 5.x again
    container_name: interview_analyzer_neo4j_test # Distinct name
    ports:
      # Use different host ports to avoid conflicts with the main neo4j service
      - "7475:7474" # Test HTTP browser (different host port)
      - "7688:7687" # Test Bolt driver (different host port)
    volumes:
      - neo4j_test_data:/data # Use a separate volume for test data
    environment:
      # Correct environment variable for Neo4j 5.x authentication
      NEO4J_AUTH: neo4j/testpassword 
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    networks:
      - interview_net # Attach to custom network
    # healthcheck: # Keep commented out for now
    #   test: ["CMD-SHELL", "tcpconnect localhost:7687 || exit 1"]
    #   interval: 5s
    #   timeout: 10s # Increased timeout from 3s to 10s
    #   retries: 20 # Keep increased retries

  # EventStoreDB service for event sourcing
  eventstore:
    image: eventstore/eventstore:24.2-jammy
    container_name: interview_analyzer_eventstore
    ports:
      - "2113:2113" # HTTP API
      - "1113:1113" # TCP (optional)
    volumes:
      - eventstore_data:/var/lib/eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    networks:
      - interview_net

volumes:
  redis_data: # Define redis volume
  neo4j_data: # Define neo4j volume (This is the correct one)
  neo4j_test_data: # Define volume for test database
  eventstore_data: # Define eventstore volume 

# Define the custom network
networks:
  interview_net: